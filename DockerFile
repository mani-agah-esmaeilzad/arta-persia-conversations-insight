# --- Stage 1: Build the React application ---
# Use a lightweight Node.js image for the build environment
FROM node:18-alpine AS build

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and the lock file to leverage Docker cache
COPY package*.json ./
# نکته: اگر از bun استفاده می‌کنید، این خط را جایگزین کنید:
# COPY bun.lockb ./

# Install dependencies
RUN npm install
# یا اگر از bun استفاده می‌کنید:
# RUN bun install

# Copy the rest of the application source code
COPY . .

# Build the application for production
# This creates a 'dist' folder with the static files
RUN npm run build

# --- Stage 2: Serve the application with Nginx ---
# Use a lightweight Nginx image to serve the static files
FROM nginx:stable-alpine

# Copy the build output from the 'build' stage to Nginx's public html directory
COPY --from=build /app/dist /usr/share/nginx/html

# Copy a custom Nginx configuration (optional but recommended for routing)
# اگر فایل کانفیگ سفارشی دارید، این خط را از کامنت خارج کنید
# COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port 80 to the outside world
EXPOSE 80

# The command to start Nginx when the container launches
CMD ["nginx", "-g", "daemon off;"]